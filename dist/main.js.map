{"version":3,"file":"main.js","mappings":"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","sources":["webpack://jsp/./src/scripts/fish.js","webpack://jsp/./src/index.js","webpack://jsp/./src/scripts/game.js","webpack://jsp/./src/scripts/ripple.js","webpack://jsp/./src/scripts/game_view.js"],"sourcesContent":["const fishies = [\n    'pictures/nemo.png',\n    'pictures/octo.png',\n    'pictures/shark.png',\n    'pictures/turtle.png',\n    'pictures/whale.png'\n]\n\nclass Fish {\n    constructor(width, height) {\n        let index = Math.floor(Math.random() * 5);\n        this.img = document.createElement('img');\n        this.img.src = fishies[index];\n        this.img.style.visibility = 'hidden';\n        this.img.style.left = `${width}px`;\n        this.img.style.top = `${height}px`;\n        this.img.style.zIndex = \"998\"\n        let fish = document.getElementById(\"fish\")\n        fish.appendChild(this.img);\n    }\n\n    showFish() {\n        console.log(\"show fish\")\n        this.img.style.visibility = 'visible'\n        \n    }\n\n    deleteFish() {\n        console.log(\"delete\")\n        this.img.remove()\n    }\n}\n\nexport default Fish;","import Game from \"./scripts/game.js\";\nimport GameView from \"./scripts/game_view.js\";\n\nexport function drawImageOnCanvas(ctx, img, canvas) {\n  const scaleFactor = Math.min(canvas.width / img.width, canvas.height / img.height);\n  const scaledWidth = img.width * scaleFactor;\n  const scaledHeight = img.height * scaleFactor;\n  const x = (canvas.width - scaledWidth) / 2;\n  const y = (canvas.height - scaledHeight) / 2;\n\n}\n\n// set background\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const canvas = document.getElementById('canvas');\n    const ctx = canvas.getContext('2d');\n\n    resizeCanvas();\n\n    function resizeCanvas() {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    }\n\n    // logic for starting game\n    const startGame = (e) => {\n      // hide introduction\n      let introduction = document.getElementById(\"introduction\");\n      introduction.classList.add(\"hidden\");\n      \n      // starting a new game\n      const game = new Game(canvas.width, canvas.height);\n      new GameView(game, ctx).start();\n    }\n    \n    let startButton = document.getElementById(\"start-button\");\n    startButton.addEventListener(\"click\", startGame);\n  \n  });\n\n  // let playAgainButton = document.getElementById(\"play-again-button\");\n\n  // playAgainButton.addEventListener(\"click\", () => { \n  //   game.restart();\n\n  // });\n\n\n\n","import Ripples from \"./ripple.js\";\nimport Fish from \"./fish.js\"\n\nclass Game {\n    constructor(canvasWidth, canvasHeight) {\n        this.pondTop = 0.2 * canvasHeight;\n        this.pondBot = 0.8 * canvasHeight;\n        this.pondLeft = 0.3 * canvasWidth; \n        this.pondRight = 0.7 * canvasWidth;\n\n        // keep track of score and strikes \n        this.score = 0;\n        this.strikes = 0;\n        this.has_ripple = false;\n        this.ripple;\n    };\n\n    draw(ctx) {\n        if(!this.has_ripple) {\n            if(this.ripple){\n                this.ripple.fish.deleteFish();\n            }\n            this.has_ripple = true;\n            this.ripple = new Ripples(this, ctx);\n        }\n        else{\n            if(!this.ripple.stillAlive()){\n                this.ripple.deleteRipple(ctx);\n                if(!this.ripple.clicked){\n                    this.strikes++;\n                    let strike_box = document.getElementById(\"strikes\");\n                    let strike = document.createElement('img');\n                    strike.style.width = '100px';\n                    strike.style.height = '100px';\n                    strike.src = 'pictures/strike.png';\n                    strike_box.appendChild(strike);\n                }\n                else{\n                    this.ripple.fish.showFish();\n                }\n                this.has_ripple = false;\n            }\n        }\n        let score = document.getElementById(\"score\");\n        score.innerHTML = this.score;\n        if(this.strikes === 3)\n            console.log(\"game ended\");\n    };\n\n}\n\n\nexport default Game; ","import Fish from \"./fish.js\"\n\nclass Ripples {\n    constructor(game, ctx){ \n      // randomize location (x,y)\n      // randomize timer (seconds)\n        this.game = game;\n        this.canvas = document.getElementById(\"canvas\");\n        console.log(this.canvas)\n\n        this.position = this.randomLocation(game);\n        this.fish = new Fish(this.position[0], this.position[1])\n        this.drawRipple(ctx);\n        this.ripple_timer = this.randomRippleTimer();\n        this.pull_timer = this.randomPullTimer();\n        this.clicked = false;\n\n        let self = this;\n        setTimeout(function(){\n            self.drawPull();\n        }, self.ripple_timer * 1000);\n }\n\n    deleteRipple(ctx){\n        console.log(\"delete ripple\")\n        ctx.clearRect(\n            this.position[0] - 55, this.position[1] - 55, 150, 150\n          );\n        let pull_warning = document.getElementById(\"pull_warning\");\n        pull_warning.style.visibility = 'hidden';\n    }\n\n    stillAlive(startTime){\n        if(!this.clicked){\n            if(this.pull_timer === 0)\n                return false;\n            else {\n                this.pull_timer -= 1;\n                return true;\n            }\n        }\n        return false\n    }\n\n    clickPull() {\n        this.clicked = true;\n        this.game.score++;\n    }\n\n    drawPull() {\n        console.log(\"pull is ready\");\n\n        // pull warning class\n        let pull_warning = document.getElementById(\"pull_warning\")\n        console.log(pull_warning.style.visibility);\n        pull_warning.style.visibility = 'visible';\n \n        let desiredX = this.position[0];\n        let desiredY = this.position[1];\n        console.log(desiredX)\n        console.log(desiredY)\n        let self = this;\n        let fish = document.getElementById(\"fish\");\n\n        // click event listener to ripple\n        fish.addEventListener('click', function(event) {\n\n            // click event coordinates \n            console.log(\"clicked\")\n            let clickedX = event.clientX;\n            let clickedY = event.clientY;\n            // clickedY = clickedY - 100;\n            console.log(desiredX);\n            console.log(desiredY);\n            console.log(clickedX);\n            console.log(clickedY);\n            if(desiredX >= 0 && desiredY >= 0){\n                // check coordinates w position \n                if (clickedX <= desiredX + 200 && clickedX >= desiredX - 200 && clickedY >= desiredY - 200 && clickedY <= desiredY + 200) {\n                    // click event \n                    console.log('click event at right position');\n                    self.clickPull()\n                    desiredX = -1;\n                    desiredY = -1;\n                }\n            }\n        });\n    }\n\n    randomLocation(game) {\n        const randY = Math.random() * (game.pondBot - game.pondTop) + game.pondTop;\n        const randX = Math.random() * (game.pondRight - game.pondLeft) + game.pondLeft; \n\n        return [randX, randY];\n    }\n\n    // number of seconds until pull shows up\n    randomRippleTimer() {\n        return Math.ceil(Math.random() * 4);\n    }\n\n    // seconds for allotted time to click \n    randomPullTimer() {\n        return Math.ceil(Math.random() * 2) + 2;\n    }\n\n    drawRipple(ctx) {\n        ctx.strokeStyle = \"white\";\n        ctx.beginPath();\n        ctx.arc(\n          this.position[0], this.position[1], 50, 0, 2 * Math.PI, true\n        );\n        ctx.stroke();\n    }\n}\n\nexport default Ripples;","class GameView {\n    constructor (game, ctx) {\n        this.ctx = ctx; \n        this.game = game;\n    }\n\n    start() {\n        this.lastTime = 0;\n        // start the animation\n        requestAnimationFrame(this.animate.bind(this));\n    }\n    \n    animate(time) {\n        const timeDelta = time - this.lastTime;\n\n        // this.game.step(timeDelta);\n        if (timeDelta > 1000) {\n            this.game.draw(this.ctx);\n            this.lastTime = time;\n        }\n\n        // every call to animate requests causes another call to animate\n        requestAnimationFrame(this.animate.bind(this));\n    }\n\n}\n\nexport default GameView;"],"names":["fishies","document","addEventListener","canvas","getElementById","ctx","getContext","width","window","innerWidth","height","innerHeight","e","classList","add","game","constructor","canvasWidth","canvasHeight","this","pondTop","pondBot","pondLeft","pondRight","score","strikes","has_ripple","ripple","draw","stillAlive","deleteRipple","clicked","fish","showFish","strike_box","strike","createElement","style","src","appendChild","deleteFish","console","log","position","randomLocation","index","Math","floor","random","img","visibility","left","top","zIndex","remove","drawRipple","ripple_timer","randomRippleTimer","pull_timer","randomPullTimer","self","setTimeout","drawPull","clearRect","startTime","clickPull","pull_warning","desiredX","desiredY","event","clickedX","clientX","clickedY","clientY","randY","ceil","strokeStyle","beginPath","arc","PI","stroke","innerHTML","start","lastTime","requestAnimationFrame","animate","bind","time"],"sourceRoot":""}